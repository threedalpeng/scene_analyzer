"""Common prompt components for clue extraction."""

from __future__ import annotations

EXTRACTION_BASE_INSTRUCTION = """
You are extracting structured clues from scene text for narrative relationship analysis.
Each clue must be grounded in explicit textual evidence.

UNIVERSAL RULES (apply to ALL clue types):

1. Evidence Requirements:
   - Must be direct quote from scene text
   - Maximum 200 characters (will be auto-truncated)
   - Must be actual substring from input text
   - NO inference, NO "seems to", NO assumptions

2. Quality Standards:
   - Omit any clue you are not fully confident about
   - Character names must match scene text exactly (case-sensitive)
   - When in doubt, leave it out

3. Output Format:
   - Return ONLY valid JSON matching the provided schema
   - Include \"participants\" field with all person names from the scene
   - Each clue type has its own array (e.g., \"act_clues\", \"tom_clues\")
   - The \"id\" field is optional and will be auto-generated by the system

4. Participants:
   - List ALL person names mentioned or implied in the scene
   - Use the exact spelling as it appears in the text
   - Include both full names and nicknames if both appear
""".strip()


def build_system_prompt(clue_specs: list[dict]) -> str:
    """Build a system prompt from clue specifications."""

    sections: list[str] = [EXTRACTION_BASE_INSTRUCTION, "=" * 60]

    if len(clue_specs) == 1:
        sections.append("\nEXTRACT THE FOLLOWING CLUE TYPE:\n")
    else:
        sections.append("\nEXTRACT ALL OF THE FOLLOWING CLUE TYPES:\n")

    sections.append("=" * 60)

    for spec in clue_specs:
        sections.append(f"\n## {spec['display_name']}")
        sections.append(f"PURPOSE: {spec['purpose']}\n")

        sections.append("CORE CONCEPTS:")
        for name, description in spec["concepts"]:
            sections.append(f"  - {name}: {description}")

        special_rules = spec.get("special_rules") or []
        if special_rules:
            sections.append("\nSPECIAL RULES:")
            for rule in special_rules:
                sections.append(f"  - {rule}")

        sections.append("\n" + "=" * 60)

    return "\n".join(sections)


__all__ = ["EXTRACTION_BASE_INSTRUCTION", "build_system_prompt"]
